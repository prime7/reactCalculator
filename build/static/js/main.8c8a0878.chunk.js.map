{"version":3,"sources":["components/Button.js","App.js","components/Screen.js","serviceWorker.js","index.js"],"names":["Button","_this","this","value","props","operatorStyle","console","log","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Fragment","className","onClick","Component","App","state","result","handleButtonClick","calculate","clear","setState","eval","e","_this2","_components_Screen__WEBPACK_IMPORTED_MODULE_7__","_components_Button__WEBPACK_IMPORTED_MODULE_8__","Screen","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c8a0878.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Button extends Component {\r\n    render() {\r\n        const { value } = this.props;\r\n        // console.log(value);\r\n        let operatorStyle =\r\n            value === \"+\" || value === \"-\" || value === \"*\" || value === \"/\"\r\n                ? \"operator\"\r\n                : \"\";\r\n\r\n        operatorStyle += value === \"=\" || value === \"C\" ? \"bottom\" : \"\";\r\n        console.log(operatorStyle);\r\n        return (\r\n            <React.Fragment>\r\n                <button\r\n                    className={operatorStyle}\r\n                    onClick={() => this.props.onClick(value)}\r\n                >\r\n                    {value}\r\n                </button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\nimport \"./app.css\";\nimport Screen from \"./components/Screen\";\nimport Button from \"./components/Button\";\n\nclass App extends Component {\n    state = {\n        result: \"\"\n    };\n\n    handleButtonClick = value => {\n        if (value === \"=\") this.calculate();\n        else if (value === \"C\") this.clear();\n        else {\n            this.setState({ result: this.state.result + value });\n        }\n    };\n    calculate = () => {\n        try {\n            this.setState({ result: eval(this.state.result) || \"\" });\n        } catch (e) {\n            this.setState({ result: \"\" });\n        }\n    };\n    clear = () => {\n        this.setState({ result: \"\" });\n    };\n    render() {\n        return (\n            <div className=\"content-body bg-dark\">\n                <div className=\"jumbotron\">\n                    <h5 className=\"text-center\">React Calculator</h5>\n                </div>\n                <Screen result={this.state.result} />\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"1\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"2\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"3\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"+\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"row\">\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"4\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"5\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"6\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"-\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"row\">\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"7\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"8\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"9\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"*\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"=\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"0\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"C\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                        <div className=\"col-3\">\n                            <Button\n                                value=\"+\"\n                                onClick={value => this.handleButtonClick(value)}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\n\r\nclass Screen extends Component {\r\n    render() {\r\n        return <h1 className=\"screen\">{this.props.result}</h1>;\r\n    }\r\n}\r\n\r\nexport default Screen;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}